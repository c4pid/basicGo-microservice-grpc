// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FlightsClient is the client API for Flights service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FlightsClient interface {
	CreateFlight(ctx context.Context, in *Flight, opts ...grpc.CallOption) (*Flight, error)
	UpdateFlight(ctx context.Context, in *Flight, opts ...grpc.CallOption) (*Flight, error)
	SearchFly(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*ListFlights, error)
	SearchFlyByID(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Flight, error)
}

type flightsClient struct {
	cc grpc.ClientConnInterface
}

func NewFlightsClient(cc grpc.ClientConnInterface) FlightsClient {
	return &flightsClient{cc}
}

func (c *flightsClient) CreateFlight(ctx context.Context, in *Flight, opts ...grpc.CallOption) (*Flight, error) {
	out := new(Flight)
	err := c.cc.Invoke(ctx, "/assignment.Flights/CreateFlight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flightsClient) UpdateFlight(ctx context.Context, in *Flight, opts ...grpc.CallOption) (*Flight, error) {
	out := new(Flight)
	err := c.cc.Invoke(ctx, "/assignment.Flights/UpdateFlight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flightsClient) SearchFly(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*ListFlights, error) {
	out := new(ListFlights)
	err := c.cc.Invoke(ctx, "/assignment.Flights/SearchFly", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flightsClient) SearchFlyByID(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Flight, error) {
	out := new(Flight)
	err := c.cc.Invoke(ctx, "/assignment.Flights/SearchFlyByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FlightsServer is the server API for Flights service.
// All implementations must embed UnimplementedFlightsServer
// for forward compatibility
type FlightsServer interface {
	CreateFlight(context.Context, *Flight) (*Flight, error)
	UpdateFlight(context.Context, *Flight) (*Flight, error)
	SearchFly(context.Context, *SearchRequest) (*ListFlights, error)
	SearchFlyByID(context.Context, *ID) (*Flight, error)
	mustEmbedUnimplementedFlightsServer()
}

// UnimplementedFlightsServer must be embedded to have forward compatible implementations.
type UnimplementedFlightsServer struct {
}

func (UnimplementedFlightsServer) CreateFlight(context.Context, *Flight) (*Flight, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFlight not implemented")
}
func (UnimplementedFlightsServer) UpdateFlight(context.Context, *Flight) (*Flight, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFlight not implemented")
}
func (UnimplementedFlightsServer) SearchFly(context.Context, *SearchRequest) (*ListFlights, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchFly not implemented")
}
func (UnimplementedFlightsServer) SearchFlyByID(context.Context, *ID) (*Flight, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchFlyByID not implemented")
}
func (UnimplementedFlightsServer) mustEmbedUnimplementedFlightsServer() {}

// UnsafeFlightsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FlightsServer will
// result in compilation errors.
type UnsafeFlightsServer interface {
	mustEmbedUnimplementedFlightsServer()
}

func RegisterFlightsServer(s grpc.ServiceRegistrar, srv FlightsServer) {
	s.RegisterService(&Flights_ServiceDesc, srv)
}

func _Flights_CreateFlight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Flight)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlightsServer).CreateFlight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assignment.Flights/CreateFlight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlightsServer).CreateFlight(ctx, req.(*Flight))
	}
	return interceptor(ctx, in, info, handler)
}

func _Flights_UpdateFlight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Flight)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlightsServer).UpdateFlight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assignment.Flights/UpdateFlight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlightsServer).UpdateFlight(ctx, req.(*Flight))
	}
	return interceptor(ctx, in, info, handler)
}

func _Flights_SearchFly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlightsServer).SearchFly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assignment.Flights/SearchFly",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlightsServer).SearchFly(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Flights_SearchFlyByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlightsServer).SearchFlyByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assignment.Flights/SearchFlyByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlightsServer).SearchFlyByID(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

// Flights_ServiceDesc is the grpc.ServiceDesc for Flights service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Flights_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "assignment.Flights",
	HandlerType: (*FlightsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateFlight",
			Handler:    _Flights_CreateFlight_Handler,
		},
		{
			MethodName: "UpdateFlight",
			Handler:    _Flights_UpdateFlight_Handler,
		},
		{
			MethodName: "SearchFly",
			Handler:    _Flights_SearchFly_Handler,
		},
		{
			MethodName: "SearchFlyByID",
			Handler:    _Flights_SearchFlyByID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "flights.proto",
}
